alias(repository_browser::checker)
{
	%time = $0;
	%sw = $1;
	%time = $(%time * 60000);
	//%time = $(%time * 1000);
	if(%sw == 1){
	    if($isTimer(browser)){
	// debug if timer
	        killtimer browser;
	        timer(browser,%time){
	            repository_browser::updateList
	        }
	    } else {
	// debug else timer
	        timer(browser,%time){
	            repository_browser::updateList
	        }
	    }
	} else {
	// debug switch 0
	    if($isTimer(browser)){
	        killtimer browser;
	    }
	    repository_browser::updateList();
	}
}


alias(repository_browser::init)
{
	%rep = "$file.localdir/config/repository_browser"
	%cfg=$config.open(%rep/rep_cfg.kvc)
	config.setsection %cfg "Main"
	%period = $config.read(%cfg,CurrentPeriod);
	%switch = $config.read(%cfg,AutoUpdateList);
	config.close %cfg
	// debug "period -- %period";
	// debug "switch -- %switch";
	$repository_browser::checker(%period,%switch);
}


alias(repository_browser::main)
{
	%Rep_main = $new(repository_browser::main)
}


alias(repository_browser::settings)
{
	%Set = $new(repository_browser::settings)
}


alias(repository_browser::updateList)
{
	%rep = "$file.localdir/config/repository_browser"
	%cfg=$config.open(%rep/rep_cfg.kvc)
	config.setsection %cfg "Main"
	%currentUrl = $config.read(%cfg,CurrentUrl)
	%ver = $config.read(%cfg,Version)
	%n = $str.split(".",%ver)
	%verM = %n[0]
	config.close %cfg
	
	http.asyncGet -y -—Å -e=o -w=h (%currentUrl/dists/%verM/rep_info.xml,%rep/rep_info.xml)
	{
	    //    notifier.message -t=5 $tr("List updated",repository_browser)
	}
}


